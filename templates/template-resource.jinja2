{% import 'macros.jinja2' as custom_mac -%}
from __future__ import annotations as _annotations
"""
Profile: {{ profile.url }}
Release: {{ release_name }}
Version: {{ profile.fhir_version }}
{%- if info.build %}
Build ID: {{ info.build }}
{%- elif info.revision %}
Revision: {{ info.revision }}
{%- endif %}
Last updated: {{ profile.fhir_last_updated }}
"""
{%- if need_typing %}
import typing
{%- endif %}
{%- if need_pydantic_field %}
from pydantic import Field
{% endif -%}
{%- if need_fhirtypes %}
from . import fhirtypes
{% endif %}
{%- set imported = {} %}
{%- for klass in classes %}
{% if klass.superclass in imports and klass.superclass.module not in imported -%}
{% if klass.superclass.module == 'fhirabstractmodel' %}from fhir_core import {{ klass.superclass.module }}{% else %}from . import {{ klass.superclass.module }}{% endif %}
{% set _ = imported.update({klass.superclass.module: True}) %}
{% endif -%}
{% endfor -%}

{%- for klass in classes %}
class {{ klass.name }}({% if klass.superclass in imports %}{{ klass.superclass.module }}.{% endif -%}
    {{ klass.superclass.name|default('object')}}):
    """Disclaimer: Any field name ends with ``__ext`` doesn't part of
    Resource StructureDefinition, instead used to enable Extensibility feature
    for FHIR Primitive Data Types.

    {{ klass.short|wordwrap(width=75, wrapstring="\n    ") }}.
{%- if klass.formal %}
    {{ klass.formal|wordwrap(width=75, wrapstring="\n    ") }}
{%- endif %}
    """
{%- if klass.resource_type %}
    __resource_type__ = "{{ klass.resource_type }}"
{%- endif %}
{%- for prop in klass.properties %}
	{% set type_klass_ %}
		{%- if prop.field_type_module %}{{ prop.field_type_module }}.{{ prop.field_type }}{% else %}{{ prop.field_type }}{% endif -%}
	{%endset -%}
	{%- set type_klass %}
		{%- if prop.is_array %}typing.List[{% if prop.need_primitive_ext  %}{{ type_klass_ }} | None{% else %}{{ type_klass_ }}{% endif %}]{% else %}{{ type_klass_ }}{% endif -%}
	{% endset %}
    {{ prop.name }}: {{ type_klass }}{% if not (prop.nonoptional and not prop.one_of_many and not prop.need_primitive_ext) %} | None{% endif %} = Field(  # type: ignore
		{% if prop.nonoptional and not prop.one_of_many and not prop.need_primitive_ext %}...{% else %}None{% endif %},
		alias="{{ prop.orig_name }}",
		title={% if prop.short%}{{ custom_mac.pep8_string_wrap(prop.short, width=70).rstrip()}}{% else %}None{% endif %},
		description={% if prop.formal%}{{ custom_mac.pep8_string_wrap(prop.formal, width=70).rstrip()}}{% else %}None{% endif %},
        json_schema_extra={
        "element_property": True,
        {%- if prop.is_summary %}
        "summary_element_property": True,
        {%- endif %}
        {%- if prop.nonoptional and not prop.one_of_many and prop.need_primitive_ext %}
        "element_required": True,
        {%- endif %}
        {%- if prop.one_of_many%}
        # Choice of Data Types. i.e {{ prop.one_of_many }}[x]
		"one_of_many": "{{ prop.one_of_many }}",
		"one_of_many_required": {% if prop.nonoptional %}True{% else %}False{% endif %},
        {%- endif %}
        {%- if prop.enum|length > 0 %}
        # note: Enum values can be used in validation,
        # but use in your own responsibilities, read official FHIR documentation.
		"enum_values": {{ prop.enum|tojson }},
        {%- endif %}
        {%- if prop.reference_to_names|length > 0 %}
        # note: Listed Resource Type(s) should be allowed as Reference.
		"enum_reference_types": {{ prop.reference_to_names|tojson }},
        {%- endif %}
        }
	)
    {%- if prop.need_primitive_ext and klass.name != "Extension" %}
    {{ prop.orig_name }}__ext: {% if prop.is_array %}typing.List[fhirtypes.FHIRPrimitiveExtensionType | None] | None{% else %}fhirtypes.FHIRPrimitiveExtensionType | None{% endif %} = Field(  # type: ignore
        None,
        alias="_{{ prop.orig_name }}",
        title="Extension field for ``{{ prop.name }}``."
    )
    {%- endif %}

{%- endfor %}
    @classmethod
    def elements_sequence(cls):
        """returning all element names from
        ``{{ klass.name }}`` according to specification,
        with preserving original sequence order.
        """
        return {{ klass.expanded_properties_sequence|tojson }}

    @classmethod
    def summary_elements_sequence(cls):
        """returning all element names (those have summary mode are enabled) from ``{{ klass.name }}`` according to specification,
        with preserving the original sequence order.
        """
        return {{ klass.expanded_summary_properties_sequence|tojson }}

{% if klass.name in required_primitive_element_fields %}
    def get_required_fields(self) -> typing.List[typing.Tuple[str, str]]:
        """https://www.hl7.org/fhir/extensibility.html#Special-Case
        In some cases, implementers might find that they do not have appropriate data for
        an element with minimum cardinality = 1. In this case, the element must be present,
        but unless the resource or a profile on it has made the actual value of the primitive
        data type mandatory, it is possible to provide an extension that explains why
        the primitive value is not present.
        """
        required_fields = [
            {%- for field, ext_field in required_primitive_element_fields[klass.name] %}
			("{{ field }}", "{{ ext_field }}"){% if not loop.last -%},{% endif -%}
	        {% endfor -%}
        ]
        return required_fields
{% endif -%}
{% if klass.name in one_of_many_fields %}
    def get_one_of_many_fields(self) -> typing.Dict[str, typing.List[str]]:
        """https://www.hl7.org/fhir/formats.html#choice
        A few elements have a choice of more than one data type for their content.
        All such elements have a name that takes the form nnn[x].
        The "nnn" part of the name is constant, and the "[x]" is replaced with
        the title-cased name of the type that is actually used.
        The table view shows each of these names explicitly.

        Elements that have a choice of data type cannot repeat - they must have a
        maximum cardinality of 1. When constructing an instance of an element with a
        choice of types, the authoring system must create a single element with a
        data type chosen from among the list of permitted data types.
        """
        one_of_many_fields = {
	        {%- for prefix in one_of_many_fields[klass.name] %}
			"{{ prefix }}": [
				{%- for field in one_of_many_fields[klass.name][prefix] %}
			    "{{ field }}"{% if not loop.last -%},{% endif -%}
				{% endfor -%}
		    ]{% if not loop.last -%},{% endif -%}
	        {% endfor -%}
	    }
        return one_of_many_fields
{% endif -%}
{%- endfor %}

